/*
 * This file is generated by jOOQ.
 */
package com.jooq.entity.tables


import com.jooq.entity.Public
import com.jooq.entity.tables.records.DatabasechangelogRecord

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row14
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Databasechangelog(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DatabasechangelogRecord>?,
    aliased: Table<DatabasechangelogRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DatabasechangelogRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>PUBLIC.DATABASECHANGELOG</code>
         */
        val DATABASECHANGELOG: Databasechangelog = Databasechangelog()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DatabasechangelogRecord> = DatabasechangelogRecord::class.java

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.ID</code>.
     */
    val ID: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("ID"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.AUTHOR</code>.
     */
    val AUTHOR: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.FILENAME</code>.
     */
    val FILENAME: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("FILENAME"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    val DATEEXECUTED: TableField<DatabasechangelogRecord, LocalDateTime?> = createField(DSL.name("DATEEXECUTED"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    val ORDEREXECUTED: TableField<DatabasechangelogRecord, Int?> = createField(DSL.name("ORDEREXECUTED"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.EXECTYPE</code>.
     */
    val EXECTYPE: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("EXECTYPE"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.MD5SUM</code>.
     */
    val MD5SUM: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("MD5SUM"), SQLDataType.VARCHAR(35), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.DESCRIPTION</code>.
     */
    val DESCRIPTION: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.COMMENTS</code>.
     */
    val COMMENTS: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("COMMENTS"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.TAG</code>.
     */
    val TAG: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("TAG"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.LIQUIBASE</code>.
     */
    val LIQUIBASE: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("LIQUIBASE"), SQLDataType.VARCHAR(20), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.CONTEXTS</code>.
     */
    val CONTEXTS: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("CONTEXTS"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.LABELS</code>.
     */
    val LABELS: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("LABELS"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>PUBLIC.DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    val DEPLOYMENT_ID: TableField<DatabasechangelogRecord, String?> = createField(DSL.name("DEPLOYMENT_ID"), SQLDataType.VARCHAR(10), this, "")

    private constructor(alias: Name, aliased: Table<DatabasechangelogRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DatabasechangelogRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>PUBLIC.DATABASECHANGELOG</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PUBLIC.DATABASECHANGELOG</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PUBLIC.DATABASECHANGELOG</code> table reference
     */
    constructor(): this(DSL.name("DATABASECHANGELOG"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DatabasechangelogRecord>): this(Internal.createPathAlias(child, key), child, key, DATABASECHANGELOG, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): Databasechangelog = Databasechangelog(DSL.name(alias), this)
    override fun `as`(alias: Name): Databasechangelog = Databasechangelog(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Databasechangelog = Databasechangelog(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Databasechangelog = Databasechangelog(name, null)

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row14<String?, String?, String?, LocalDateTime?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row14<String?, String?, String?, LocalDateTime?, Int?, String?, String?, String?, String?, String?, String?, String?, String?, String?>
}
