/*
 * This file is generated by jOOQ.
 */
package com.jooq.entity.tables


import com.jooq.entity.Public
import com.jooq.entity.tables.records.LiquibaseInitRecord

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class LiquibaseInit(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LiquibaseInitRecord>?,
    aliased: Table<LiquibaseInitRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<LiquibaseInitRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>PUBLIC.LIQUIBASE_INIT</code>
         */
        val LIQUIBASE_INIT: LiquibaseInit = LiquibaseInit()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<LiquibaseInitRecord> = LiquibaseInitRecord::class.java

    /**
     * The column <code>PUBLIC.LIQUIBASE_INIT.ID</code>.
     */
    val ID: TableField<LiquibaseInitRecord, Int?> = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>PUBLIC.LIQUIBASE_INIT.AUTHOR</code>.
     */
    val AUTHOR: TableField<LiquibaseInitRecord, String?> = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(1000000000), this, "")

    /**
     * The column <code>PUBLIC.LIQUIBASE_INIT.DESCRIPTION</code>.
     */
    val DESCRIPTION: TableField<LiquibaseInitRecord, String?> = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1000000000), this, "")

    /**
     * The column <code>PUBLIC.LIQUIBASE_INIT.INIT_AT</code>.
     */
    val INIT_AT: TableField<LiquibaseInitRecord, LocalDateTime?> = createField(DSL.name("INIT_AT"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<LiquibaseInitRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<LiquibaseInitRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>PUBLIC.LIQUIBASE_INIT</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>PUBLIC.LIQUIBASE_INIT</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>PUBLIC.LIQUIBASE_INIT</code> table reference
     */
    constructor(): this(DSL.name("LIQUIBASE_INIT"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, LiquibaseInitRecord>): this(Internal.createPathAlias(child, key), child, key, LIQUIBASE_INIT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<LiquibaseInitRecord, Int?> = super.getIdentity() as Identity<LiquibaseInitRecord, Int?>
    override fun `as`(alias: String): LiquibaseInit = LiquibaseInit(DSL.name(alias), this)
    override fun `as`(alias: Name): LiquibaseInit = LiquibaseInit(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LiquibaseInit = LiquibaseInit(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LiquibaseInit = LiquibaseInit(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row4<Int?, String?, String?, LocalDateTime?>
}
